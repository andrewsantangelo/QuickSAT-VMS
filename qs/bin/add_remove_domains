#!/usr/bin/env python

import argparse
import vms

# Steps to generate MCT:
#   1. Extract necessary information from QS/VMS database
#   2. Create new MCT
#   3. Get new images/kernels to include in the MCT update package
#   4. Create MCT update tarball
#   5. Transfer MCT update tarball to target, install new items and restart MCP
if __name__ == '__main__':
    # Usage:
    #   $ mctinstall <options>
    # command line arguments:
    #   -h --help       : print help information
    #
    #   --v_address     : address (IP or URL) of QS/VMS database
    #   --v_port        : UDP port used by the QS/VMS database
    #   --v_username    : username for the QS/VMS database
    #   --v_password    : password for the QS/VMS database
    #   --v_dbname      : name of the QS/VMS database
    #
    #   --m_address     : address (IP or URL) of the system that MCP is installed on
    #   --m_port        : UDP port used by the system that MCP is installed on
    #   --m_username    : username for the system that MCP is installed on
    #   --m_password    : password for the system that MCP is installed on
    parser = argparse.ArgumentParser(description='Create MCT, gather application images, and update MCP system')
    parser.add_argument('--vms-address', default='127.0.0.1', help='address (IP or URL) of QS/VMS database')
    parser.add_argument('--vms-port', type=int, default=3306, help='UDP port used by the QS/VMS database')
    parser.add_argument('--vms-cert', help='location of SSL certificate to use to connect to QS/VMS database')
    parser.add_argument('--vms-dbname', default='stepSATdb_Flight', help='name of the QS/VMS database')
    parser.add_argument('--vms-username', default='root', help='username for the QS/VMS database')
    parser.add_argument('--no-vms-username', action='store_true', help='specify that a username is not required for the QS/VMS database (overrides --vms-username)')
    parser.add_argument('--vms-password', default='root', help='password for the QS/VMS database')
    parser.add_argument('--no-vms-password', action='store_true', help='specify that a password is not required for the QS/VMS database (overrides --vms-password)')
    parser.add_argument('--mcp-address', required=True, help='address (IP or URL) of the system that MCP is installed on')
    parser.add_argument('--mcp-port', type=int, default=22, help='UDP port used by the system that MCP is installed on')
    parser.add_argument('--mcp-username', default='root', help='username for the system that MCP is installed on')
    parser.add_argument('--no-mcp-username', action='store_true', help='specify that a username is not required for the MCP system (overrides --mcp-username)')
    parser.add_argument('--mcp-password', default='root', help='password for the system that MCP is installed on')
    parser.add_argument('--no-mcp-password', action='store_true', help='specify that a password is not required for the MCP system (overrides --mcp-username)')

    # Parse the command line arguments
    args = parser.parse_args()

    if args.no_vms_password:
        args.vms_password = None
    if args.no_vms_username:
        args.vms_username = None

    if args.no_mcp_password:
        args.mcp_password = None
    if args.no_mcp_username:
        args.mcp_username = None

    # All of the required arguments should be present, so just pass a dict()
    # object to the vms class constructor
    conn = vms.vms(**vars(args))
    conn.process()

